import java.text.SimpleDateFormat

import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.PropertiesConfiguration

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2'
        classpath 'commons-configuration:commons-configuration:1.10'
        classpath 'com.guardsquare:proguard-gradle:7.4.1'
        classpath 'com.github.spotbugs.snom:spotbugs-gradle-plugin:5.2.5'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.5.0.2730'
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'idea'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'

    tasks.withType(JavaCompile) {
        options.release = 8
    }

    ext {
        privkeyid = '99'
        privkeyfile = "$rootDir/config/priv_key"
        pubkeyfile = "$rootDir/config/pub_key"
        mxtfile = "${project(':core').buildDir}/${project(':core').distsDirName}/${rootProject.name}-v${getConfigValueForKey("module_build")}.mxt"
    }

    repositories {
        mavenCentral()
        flatDir dirs: "$rootDir/lib"
    }

    spotbugs {
        effort = "max"
        reportLevel = "medium"
		excludeFilter = file("$rootDir/config/spotbugs-exclude.xml")
    }

	spotbugsMain {
		reports {
			html {
				required = true
			}
		}
	}

    jacoco {
        toolVersion = "0.8.11"
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.required = false
            html.required = true
            html.stylesheet resources.text.fromFile("$rootDir/config/checkstyle/checkstyle-noframes-sorted.xsl")
        }
    }

	checkstyle {
		toolVersion = "10.12.5"
	}

	pmd {
        toolVersion = "6.55.0"
        sourceSets = [sourceSets.main]
        ruleSets = []
        ruleSetFiles = files("$rootDir/config/pmd-ruleSet.xml")
    }

    sonar {
        properties {
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.organization", "${rootProject.name}"
        }
    }
}

task createLibs(type: Exec) {
    description 'Generates patched libraries from trusted source'
    executable "sh"
    args "-c", "scripts/create_libs.sh"
}

String getCurrentTimestamp() {
    Date today = new Date()
    SimpleDateFormat df = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss')
    return df.format(today)
}

String getConfigValueForKey(String key) {
    file("${project(':core').projectDir}/src/main/resources/com/moneydance/modules/features/paypalimporter/meta_info.dict").withInputStream {
        final Configuration config = new PropertiesConfiguration();
        config.load(it);
        return config.getString("\"" + key + "\"").replaceAll("^\"|\"\$", "");
    }
}
